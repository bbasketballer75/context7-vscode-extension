#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const https_1 = __importDefault(require("https"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const prompts_1 = __importDefault(require("prompts"));
const minimist_1 = __importDefault(require("minimist"));
const https_proxy_agent_1 = require("https-proxy-agent");
const url = __importStar(require("url"));
const argv = (0, minimist_1.default)(process.argv.slice(2));
if (argv._.length === 0 || argv['h'] || argv['help']) {
    console.log(getHelpMessage());
}
else if (argv._[0] === 'dev') {
    handleDev(argv._[1]);
}
else if (argv._[0]) {
    handleDefaultDownload(argv._[0], argv['f']);
}
function handleDev(gitTagOrBranch = 'main') {
    const proposalNames = getEnabledApiProposals();
    if (proposalNames.length === 0) {
        console.error(`No proposals in the "enabledApiProposals"-property of package.json found.`);
        return;
    }
    for (const info of proposalNames) {
        const idx = info.lastIndexOf('@');
        const name = idx < 0 ? info : info.slice(0, idx);
        const version = idx < 0 ? undefined : info.slice(idx + 1);
        const url = `https://raw.githubusercontent.com/microsoft/vscode/${gitTagOrBranch}/src/vscode-dts/vscode.proposed.${name}.d.ts`;
        const outPath = path_1.default.resolve(process.cwd(), `./vscode.proposed.${name}.d.ts`);
        console.log(`Downloading vscode.proposed.${toGreenString(name)}.d.ts\nTo:   ${outPath}\nFrom: ${url}`);
        download(url, outPath)
            .then(async () => {
            if (version) {
                const src = await fs_1.default.promises.readFile(outPath, 'utf-8');
                const versionRegex = /\/\/\s*version:\s*(\d+)/i;
                const versionMatch = versionRegex.exec(src)[1];
                if (versionMatch !== version) {
                    console.log(toRedString(`Version mismatch for ${name}: Latest is ${versionMatch}, the request version ${version} DOES NOT exist.`));
                }
            }
        })
            .catch(err => console.error(err));
    }
    console.log('Read more about proposed API at: https://code.visualstudio.com/api/advanced-topics/using-proposed-api');
}
function getEnabledApiProposals() {
    let dir = process.cwd();
    while (true) {
        const packageJsonPath = path_1.default.resolve(dir, './package.json');
        try {
            const packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonPath, 'utf-8'));
            return Array.isArray(packageJson.enabledApiProposals) ? packageJson.enabledApiProposals : [];
        }
        catch {
            // continue
        }
        const next = path_1.default.dirname(dir);
        if (next === dir) {
            return [];
        }
        else {
            dir = next;
        }
    }
}
function handleDefaultDownload(gitTagOrBranch, force) {
    // handle master->main rename for old consumers
    if (gitTagOrBranch === 'master') {
        gitTagOrBranch = 'main';
    }
    const url = `https://raw.githubusercontent.com/microsoft/vscode/${gitTagOrBranch}/src/vscode-dts/vscode.d.ts`;
    const legacyUrl = `https://raw.githubusercontent.com/microsoft/vscode/${gitTagOrBranch}/src/vs/vscode.d.ts`;
    const outPath = path_1.default.resolve(process.cwd(), './vscode.d.ts');
    console.log(`Downloading vscode.d.ts\nTo:   ${outPath}\nFrom: ${url}`);
    download(url, outPath).catch(() => download(legacyUrl, outPath)).then(() => {
        if (force) {
            forceRemoveNodeModulesTypes();
        }
        else {
            removeNodeModulesTypes();
        }
    });
}
function getHelpMessage() {
    return [
        'vscode-dts: CLI utility for downloading vscode.d.ts and vscode.proposed.<proposal>.d.ts',
        '',
        'Usage:',
        '  - npx vscode-dts dev                          Download vscode.proposaled.<proposal>.d.ts files',
        '  - npx vscode-dts dev <git-tag | git-branch>   Download vscode.proposaled.<proposal>.d.ts files from git tag/branch of microsoft/vscode',
        '  - npx vscode-dts <git-tag | git-branch>       Download vscode.d.ts from git tag/branch of microsoft/vscode',
        '  - npx vscode-dts <git-tag | git-branch> -f    Download vscode.d.ts and remove conflicting types in node_modules/@types/vscode',
        '  - npx vscode-dts                              Print Help',
        '  - npx vscode-dts -h                           Print Help',
        '  - npx vscode-dts --help                       Print Help'
    ].join(os_1.default.EOL);
}
function download(link, outPath) {
    return new Promise((resolve, reject) => {
        const options = url.parse(link);
        if (process.env.HTTPS_PROXY) {
            options.agent = new https_proxy_agent_1.HttpsProxyAgent(process.env.HTTPS_PROXY);
        }
        https_1.default.get(options, (res) => {
            if (res.statusCode !== 200) {
                reject(`Failed to get ${link}`);
                return;
            }
            const outStream = fs_1.default.createWriteStream(outPath);
            outStream.on('close', () => {
                resolve();
            });
            res.pipe(outStream);
        });
    });
}
function forceRemoveNodeModulesTypes() {
    if (fs_1.default.existsSync('node_modules/vscode/vscode.d.ts')) {
        fs_1.default.unlinkSync('node_modules/vscode/vscode.d.ts');
        console.log('Removed node_modules/vscode/vscode.d.ts');
    }
    else if (fs_1.default.existsSync('node_modules/@types/vscode/index.d.ts')) {
        fs_1.default.rm('node_modules/@types/vscode', { force: true, recursive: true }, err => {
            if (err) {
                console.error('Failed to remove node_modules/@types/vscode');
                console.error(err);
            }
            else {
                console.log('Removed node_modules/@types/vscode');
            }
        });
    }
}
function removeNodeModulesTypes() {
    if (fs_1.default.existsSync('node_modules/vscode/vscode.d.ts')) {
        (0, prompts_1.default)({
            type: 'confirm',
            name: 'value',
            message: 'Remove conflicting vscode typing at node_modules/vscode/vscode.d.ts?'
        }).then(res => {
            if (res.value) {
                fs_1.default.unlinkSync('node_modules/vscode/vscode.d.ts');
                console.log('Removed node_modules/vscode/vscode.d.ts');
            }
        });
    }
    else if (fs_1.default.existsSync('node_modules/@types/vscode/index.d.ts')) {
        (0, prompts_1.default)({
            type: 'confirm',
            name: 'value',
            message: 'Remove conflicting vscode typing at node_modules/@types/vscode?'
        }).then(res => {
            if (res.value) {
                fs_1.default.rm('node_modules/@types/vscode', { force: true, recursive: true }, err => {
                    if (err) {
                        console.error('Failed to remove node_modules/@types/vscode');
                        console.error(err);
                    }
                    else {
                        console.log('Removed node_modules/@types/vscode');
                    }
                });
            }
        });
    }
}
function toRedString(s) {
    return `\x1b[31m${s}\x1b[0m`;
}
function toGreenString(s) {
    return `\x1b[32m${s}\x1b[0m`;
}
//# sourceMappingURL=index.js.map